#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       1                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       3                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       0                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(190,57)
varIndRes.measureP
varIndRes.measureI
varIndRes.measureV
varIndRes.v.re
varIndRes.v.im
varIndRes.i.re
varIndRes.i.im
varIndRes.sPhasePlug.n
varIndRes.sPhasePlug.phase[1].v.re
varIndRes.sPhasePlug.phase[1].v.im
varIndRes.sPhasePlug.neutral.v.re
varIndRes.sPhasePlug.neutral.v.im
varIndRes.P_in.real
varIndRes.P_in.apparent
varIndRes.P_in.phi
varIndRes.P_in.cosPhi
varIndRes.va_in.re
varIndRes.va_in.im
varIndRes.amp_in.re
varIndRes.amp_in.im
varIndRes.volt_in.re
varIndRes.volt_in.im
varIndRes.y
varIndRes.P_nominal
varIndRes.pf
varIndRes.S.re
varIndRes.S.im
varIndRes.phi
varIndRes.lagging
varIndRes.eps
varIndRes.oneEps
varIndRes.isLoad
varIndRes.yInt
gro.pin.v.re
gro.pin.v.im
gro.pin.i.re
gro.pin.i.im
ramp.height
ramp.duration
ramp.offset
ramp.startTime
indRes.measureP
indRes.measureI
indRes.measureV
indRes.v.re
indRes.v.im
indRes.i.re
indRes.i.im
indRes.sPhasePlug.n
indRes.sPhasePlug.neutral.v.re
indRes.sPhasePlug.neutral.v.im
indRes.P_in.real
indRes.P_in.apparent
indRes.P_in.phi
indRes.P_in.cosPhi
indRes.va_in.re
indRes.va_in.im
indRes.amp_in.re
indRes.amp_in.im
indRes.volt_in.re
indRes.volt_in.im
indRes.P_nominal
indRes.pf
indRes.S.re
indRes.S.im
indRes.phi
indRes.lagging
varConRes.measureP
varConRes.measureI
varConRes.measureV
varConRes.sPhasePlug.n
varConRes.sPhasePlug.phase[1].reference.gamma
varConRes.sPhasePlug.phase[1].reference.der(gamma)
varConRes.sPhasePlug.neutral.v.re
varConRes.sPhasePlug.neutral.v.im
varConRes.P_in.real
varConRes.P_in.apparent
varConRes.P_in.phi
varConRes.P_in.cosPhi
varConRes.va_in.re
varConRes.va_in.im
varConRes.amp_in.re
varConRes.amp_in.im
varConRes.volt_in.re
varConRes.volt_in.im
varConRes.P_nominal
varConRes.pf
varConRes.S.re
varConRes.S.im
varConRes.phi
varConRes.lagging
varConRes.eps
varConRes.oneEps
varConRes.isLoad
varConRes.yInt
conRes.measureP
conRes.measureI
conRes.measureV
conRes.sPhasePlug.n
conRes.sPhasePlug.neutral.v.re
conRes.sPhasePlug.neutral.v.im
conRes.P_in.real
conRes.P_in.apparent
conRes.P_in.phi
conRes.P_in.cosPhi
conRes.va_in.re
conRes.va_in.im
conRes.amp_in.re
conRes.amp_in.im
conRes.volt_in.re
conRes.volt_in.im
conRes.P_nominal
conRes.pf
conRes.S.re
conRes.S.im
conRes.phi
conRes.lagging
sou.measureP
sou.i.re
sou.i.im
sou.sPhasePlug.n
sou.sPhasePlug.phase[1].reference.gamma
sou.sPhasePlug.neutral.v.re
sou.sPhasePlug.neutral.v.im
sou.sPhasePlug.neutral.i.re
sou.sPhasePlug.neutral.i.im
sou.P_in.real
sou.P_in.apparent
sou.P_in.phi
sou.P_in.cosPhi
sou.va_in.re
sou.va_in.im
sou.f
sou.V
sou.phi
sou.voltageSource.pin_p.reference.gamma
sou.voltageSource.pin_n.v.re
sou.voltageSource.pin_n.v.im
sou.voltageSource.f
sou.voltageSource.V
sou.voltageSource.phi
sou.n.v.re
sou.n.v.im
seriesConnection1.measureP
seriesConnection1.measureI
seriesConnection1.measureV
seriesConnection1.sPhasePlug.n
seriesConnection1.sPhasePlug.phase[1].reference.gamma
seriesConnection1.sPhasePlug.neutral.v.re
seriesConnection1.sPhasePlug.neutral.v.im
seriesConnection1.P_in.real
seriesConnection1.P_in.apparent
seriesConnection1.P_in.phi
seriesConnection1.P_in.cosPhi
seriesConnection1.va_in.re
seriesConnection1.va_in.im
seriesConnection1.amp_in.re
seriesConnection1.amp_in.im
seriesConnection1.volt_in.re
seriesConnection1.volt_in.im
seriesConnection1.N
seriesConnection1.seriesLoads[1].n
seriesConnection1.seriesLoads[2].n
seriesConnection1.seriesLoads[2].phase[1].reference.gamma
seriesConnection1.seriesLoads[2].neutral.v.re
seriesConnection1.seriesLoads[2].neutral.v.im
seriesConnection2.measureP
seriesConnection2.measureI
seriesConnection2.measureV
seriesConnection2.sPhasePlug.n
seriesConnection2.sPhasePlug.phase[1].reference.gamma
seriesConnection2.sPhasePlug.neutral.v.re
seriesConnection2.sPhasePlug.neutral.v.im
seriesConnection2.P_in.real
seriesConnection2.P_in.apparent
seriesConnection2.P_in.phi
seriesConnection2.P_in.cosPhi
seriesConnection2.va_in.re
seriesConnection2.va_in.im
seriesConnection2.amp_in.re
seriesConnection2.amp_in.im
seriesConnection2.volt_in.re
seriesConnection2.volt_in.im
seriesConnection2.N
seriesConnection2.seriesLoads[1].n
seriesConnection2.seriesLoads[1].neutral.reference.gamma
seriesConnection2.seriesLoads[2].n
seriesConnection2.seriesLoads[2].phase[1].reference.gamma
seriesConnection2.seriesLoads[2].neutral.v.re
seriesConnection2.seriesLoads[2].neutral.v.im

double initialValue(190,6)
  0       0                       0                       0                
  6   257   # varIndRes.measureP
  0       0                       0                       0                
  6   257   # varIndRes.measureI
  0       0                       0                       0                
  6   257   # varIndRes.measureV
  0       0                       0                       0                
  6   288   # varIndRes.v.re
  0       0                       0                       0                
  6   288   # varIndRes.v.im
  0       0                       0                       0                
  6   288   # varIndRes.i.re
  0       0                       0                       0                
  6   288   # varIndRes.i.im
  0       1                       0                       0                
  6   262   # varIndRes.sPhasePlug.n
  0       0                       0                       0                
  6   256   # varIndRes.sPhasePlug.phase[1].v.re
  0       0                       0                       0                
  6   256   # varIndRes.sPhasePlug.phase[1].v.im
  0       0                       0                       0                
  6   256   # varIndRes.sPhasePlug.neutral.v.re
  0       0                       0                       0                
  6   256   # varIndRes.sPhasePlug.neutral.v.im
  0       0                       0                       0                
  6  1284   # varIndRes.P_in.real
  0       0                       0                       0                
  6  1284   # varIndRes.P_in.apparent
  0       0                       0                       0                
  6  1284   # varIndRes.P_in.phi
  0       0                       0                       0                
  6  1284   # varIndRes.P_in.cosPhi
  0       0                       0                       0                
  6  1284   # varIndRes.va_in.re
  0       0                       0                       0                
  6  1284   # varIndRes.va_in.im
  0       0                       0                       0                
  6  1284   # varIndRes.amp_in.re
  0       0                       0                       0                
  6  1284   # varIndRes.amp_in.im
  0       0                       0                       0                
  6  1284   # varIndRes.volt_in.re
  0       0                       0                       0                
  6  1284   # varIndRes.volt_in.im
  0       0                       0                       1                
  6   256   # varIndRes.y
 -1    1000                       0                 1.0000000000000000E+100
  1   280   # varIndRes.P_nominal
 -1  8.0000000000000004E-01       0                       1                
  1   280   # varIndRes.pf
  0       0                       0                       0                
  6   256   # varIndRes.S.re
  0       0                       0                       0                
  6   256   # varIndRes.S.im
  0       0                       0                       0                
  6   256   # varIndRes.phi
  0       1                       0                       0                
  6  1281   # varIndRes.lagging
  0  9.9999999999999998E-13       0                       0                
  6  1280   # varIndRes.eps
  0  9.9999999999900002E-01       0                       0                
  6  1280   # varIndRes.oneEps
  0       1                       0                       0                
  6  1281   # varIndRes.isLoad
  0  9.9999999999999998E-13  9.9999999999999998E-13 1.0000000000000000E+100
  6  1280   # varIndRes.yInt
  0       0                       0                       0                
  6   256   # gro.pin.v.re
  0       0                       0                       0                
  6   256   # gro.pin.v.im
  0       0                       0                       0                
  6   384   # gro.pin.i.re
  0       0                       0                       0                
  6   384   # gro.pin.i.im
 -1       1                       0                       0                
  1   280   # ramp.height
 -1       1                  9.9999999999999997E-61 1.0000000000000000E+100
  1   280   # ramp.duration
 -1       0                       0                       0                
  1   280   # ramp.offset
 -1       0                       0                       0                
  1   280   # ramp.startTime
  0       0                       0                       0                
  6   257   # indRes.measureP
  0       0                       0                       0                
  6   257   # indRes.measureI
  0       0                       0                       0                
  6   257   # indRes.measureV
  0       1                       0                       0                
  6   288   # indRes.v.re
  0       1                       0                       0                
  6   288   # indRes.v.im
  0       0                       0                       0                
  6   288   # indRes.i.re
  0       0                       0                       0                
  6   288   # indRes.i.im
  0       1                       0                       0                
  6   262   # indRes.sPhasePlug.n
  0       1                       0                       0                
  6   256   # indRes.sPhasePlug.neutral.v.re
  0       1                       0                       0                
  6   256   # indRes.sPhasePlug.neutral.v.im
  0       0                       0                       0                
  6  1284   # indRes.P_in.real
  0       0                       0                       0                
  6  1284   # indRes.P_in.apparent
  0       0                       0                       0                
  6  1284   # indRes.P_in.phi
  0       0                       0                       0                
  6  1284   # indRes.P_in.cosPhi
  0       0                       0                       0                
  6  1284   # indRes.va_in.re
  0       0                       0                       0                
  6  1284   # indRes.va_in.im
  0       0                       0                       0                
  6  1284   # indRes.amp_in.re
  0       0                       0                       0                
  6  1284   # indRes.amp_in.im
  0       0                       0                       0                
  6  1284   # indRes.volt_in.re
  0       0                       0                       0                
  6  1284   # indRes.volt_in.im
 -1    1000                       0                 1.0000000000000000E+100
  1   280   # indRes.P_nominal
 -1  8.0000000000000004E-01       0                       1                
  1   280   # indRes.pf
  0       0                       0                       0                
  6   256   # indRes.S.re
  0       0                       0                       0                
  6   256   # indRes.S.im
  0       0                       0                       0                
  6   256   # indRes.phi
  0       1                       0                       0                
  6  1281   # indRes.lagging
  0       0                       0                       0                
  6   257   # varConRes.measureP
  0       0                       0                       0                
  6   257   # varConRes.measureI
  0       0                       0                       0                
  6   257   # varConRes.measureV
  0       1                       0                       0                
  6   262   # varConRes.sPhasePlug.n
 -1       0                       0                       0                
  2   280   # varConRes.sPhasePlug.phase[1].reference.gamma
  0       0                       0                       0                
  3   256   # varConRes.sPhasePlug.phase[1].reference.der(gamma)
  0       0                       0                       0                
  6   256   # varConRes.sPhasePlug.neutral.v.re
  0       0                       0                       0                
  6   256   # varConRes.sPhasePlug.neutral.v.im
  0       0                       0                       0                
  6  1284   # varConRes.P_in.real
  0       0                       0                       0                
  6  1284   # varConRes.P_in.apparent
  0       0                       0                       0                
  6  1284   # varConRes.P_in.phi
  0       0                       0                       0                
  6  1284   # varConRes.P_in.cosPhi
  0       0                       0                       0                
  6  1284   # varConRes.va_in.re
  0       0                       0                       0                
  6  1284   # varConRes.va_in.im
  0       0                       0                       0                
  6  1284   # varConRes.amp_in.re
  0       0                       0                       0                
  6  1284   # varConRes.amp_in.im
  0       0                       0                       0                
  6  1284   # varConRes.volt_in.re
  0       0                       0                       0                
  6  1284   # varConRes.volt_in.im
 -1    1000                       0                 1.0000000000000000E+100
  1   280   # varConRes.P_nominal
 -1  8.0000000000000004E-01       0                       1                
  1   280   # varConRes.pf
  0       0                       0                       0                
  6   256   # varConRes.S.re
  0       0                       0                       0                
  6   256   # varConRes.S.im
  0       0                       0                       0                
  6   256   # varConRes.phi
  0       0                       0                       0                
  6  1281   # varConRes.lagging
  0  9.9999999999999998E-13       0                       0                
  6  1280   # varConRes.eps
  0  9.9999999999900002E-01       0                       0                
  6  1280   # varConRes.oneEps
  0       1                       0                       0                
  6  1281   # varConRes.isLoad
  0  9.9999999999999998E-13  9.9999999999999998E-13 1.0000000000000000E+100
  6  1280   # varConRes.yInt
  0       0                       0                       0                
  6   257   # conRes.measureP
  0       0                       0                       0                
  6   257   # conRes.measureI
  0       0                       0                       0                
  6   257   # conRes.measureV
  0       1                       0                       0                
  6   262   # conRes.sPhasePlug.n
  0       0                       0                       0                
  6   256   # conRes.sPhasePlug.neutral.v.re
  0       0                       0                       0                
  6   256   # conRes.sPhasePlug.neutral.v.im
  0       0                       0                       0                
  6  1284   # conRes.P_in.real
  0       0                       0                       0                
  6  1284   # conRes.P_in.apparent
  0       0                       0                       0                
  6  1284   # conRes.P_in.phi
  0       0                       0                       0                
  6  1284   # conRes.P_in.cosPhi
  0       0                       0                       0                
  6  1284   # conRes.va_in.re
  0       0                       0                       0                
  6  1284   # conRes.va_in.im
  0       0                       0                       0                
  6  1284   # conRes.amp_in.re
  0       0                       0                       0                
  6  1284   # conRes.amp_in.im
  0       0                       0                       0                
  6  1284   # conRes.volt_in.re
  0       0                       0                       0                
  6  1284   # conRes.volt_in.im
 -1    1000                       0                 1.0000000000000000E+100
  1   280   # conRes.P_nominal
 -1  9.0000000000000002E-01       0                       1                
  1   280   # conRes.pf
  0       0                       0                       0                
  6   256   # conRes.S.re
  0       0                       0                       0                
  6   256   # conRes.S.im
  0       0                       0                       0                
  6   256   # conRes.phi
  0       0                       0                       0                
  6  1281   # conRes.lagging
  0       0                       0                       0                
  6   257   # sou.measureP
  0       0                       0                       0                
  6   256   # sou.i.re
  0       0                       0                       0                
  6   256   # sou.i.im
  0       1                       0                       0                
  6   262   # sou.sPhasePlug.n
  0       0                       0                       0                
  6   256   # sou.sPhasePlug.phase[1].reference.gamma
  0       0                       0                       0                
  6   256   # sou.sPhasePlug.neutral.v.re
  0       0                       0                       0                
  6   256   # sou.sPhasePlug.neutral.v.im
  0       0                       0                       0                
  6   384   # sou.sPhasePlug.neutral.i.re
  0       0                       0                       0                
  6   384   # sou.sPhasePlug.neutral.i.im
  0       0                       0                       0                
  6  1284   # sou.P_in.real
  0       0                       0                       0                
  6  1284   # sou.P_in.apparent
  0       0                       0                       0                
  6  1284   # sou.P_in.phi
  0       0                       0                       0                
  6  1284   # sou.P_in.cosPhi
  0       0                       0                       0                
  6  1284   # sou.va_in.re
  0       0                       0                       0                
  6  1284   # sou.va_in.im
 -1      60                       0                       0                
  1   280   # sou.f
 -1     120                       0                       0                
  1   280   # sou.V
 -1       0                       0                       0                
  1   280   # sou.phi
  0       0                       0                       0                
  6   256   # sou.voltageSource.pin_p.reference.gamma
  0       0                       0                       0                
  6   256   # sou.voltageSource.pin_n.v.re
  0       0                       0                       0                
  6   256   # sou.voltageSource.pin_n.v.im
  0       1                       0                       0                
  6   256   # sou.voltageSource.f
  0       1                       0                       0                
  6   256   # sou.voltageSource.V
  0       0                       0                       0                
  6   256   # sou.voltageSource.phi
  0       0                       0                       0                
  6   256   # sou.n.v.re
  0       0                       0                       0                
  6   256   # sou.n.v.im
  0       0                       0                       0                
  6   257   # seriesConnection1.measureP
  0       0                       0                       0                
  6   257   # seriesConnection1.measureI
  0       0                       0                       0                
  6   257   # seriesConnection1.measureV
  0       1                       0                       0                
  6   262   # seriesConnection1.sPhasePlug.n
  0       0                       0                       0                
  6   256   # seriesConnection1.sPhasePlug.phase[1].reference.gamma
  0       0                       0                       0                
  6   256   # seriesConnection1.sPhasePlug.neutral.v.re
  0       0                       0                       0                
  6   256   # seriesConnection1.sPhasePlug.neutral.v.im
  0       0                       0                       0                
  6  1284   # seriesConnection1.P_in.real
  0       0                       0                       0                
  6  1284   # seriesConnection1.P_in.apparent
  0       0                       0                       0                
  6  1284   # seriesConnection1.P_in.phi
  0       0                       0                       0                
  6  1284   # seriesConnection1.P_in.cosPhi
  0       0                       0                       0                
  6  1284   # seriesConnection1.va_in.re
  0       0                       0                       0                
  6  1284   # seriesConnection1.va_in.im
  0       0                       0                       0                
  6  1284   # seriesConnection1.amp_in.re
  0       0                       0                       0                
  6  1284   # seriesConnection1.amp_in.im
  0       0                       0                       0                
  6  1284   # seriesConnection1.volt_in.re
  0       0                       0                       0                
  6  1284   # seriesConnection1.volt_in.im
  0       2                       0                       0                
  6   258   # seriesConnection1.N
  0       1                       0                       0                
  6   262   # seriesConnection1.seriesLoads[1].n
  0       1                       0                       0                
  6   262   # seriesConnection1.seriesLoads[2].n
  0       0                       0                       0                
  6   256   # seriesConnection1.seriesLoads[2].phase[1].reference.gamma
  0       0                       0                       0                
  6   256   # seriesConnection1.seriesLoads[2].neutral.v.re
  0       0                       0                       0                
  6   256   # seriesConnection1.seriesLoads[2].neutral.v.im
  0       0                       0                       0                
  6   257   # seriesConnection2.measureP
  0       0                       0                       0                
  6   257   # seriesConnection2.measureI
  0       0                       0                       0                
  6   257   # seriesConnection2.measureV
  0       1                       0                       0                
  6   262   # seriesConnection2.sPhasePlug.n
  0       0                       0                       0                
  6   256   # seriesConnection2.sPhasePlug.phase[1].reference.gamma
  0       0                       0                       0                
  6   256   # seriesConnection2.sPhasePlug.neutral.v.re
  0       0                       0                       0                
  6   256   # seriesConnection2.sPhasePlug.neutral.v.im
  0       0                       0                       0                
  6  1284   # seriesConnection2.P_in.real
  0       0                       0                       0                
  6  1284   # seriesConnection2.P_in.apparent
  0       0                       0                       0                
  6  1284   # seriesConnection2.P_in.phi
  0       0                       0                       0                
  6  1284   # seriesConnection2.P_in.cosPhi
  0       0                       0                       0                
  6  1284   # seriesConnection2.va_in.re
  0       0                       0                       0                
  6  1284   # seriesConnection2.va_in.im
  0       0                       0                       0                
  6  1284   # seriesConnection2.amp_in.re
  0       0                       0                       0                
  6  1284   # seriesConnection2.amp_in.im
  0       0                       0                       0                
  6  1284   # seriesConnection2.volt_in.re
  0       0                       0                       0                
  6  1284   # seriesConnection2.volt_in.im
  0       2                       0                       0                
  6   258   # seriesConnection2.N
  0       1                       0                       0                
  6   262   # seriesConnection2.seriesLoads[1].n
  0       0                       0                       0                
  6   256   # seriesConnection2.seriesLoads[1].neutral.reference.gamma
  0       1                       0                       0                
  6   262   # seriesConnection2.seriesLoads[2].n
  0       0                       0                       0                
  6   256   # seriesConnection2.seriesLoads[2].phase[1].reference.gamma
  0       0                       0                       0                
  6   256   # seriesConnection2.seriesLoads[2].neutral.v.re
  0       0                       0                       0                
  6   256   # seriesConnection2.seriesLoads[2].neutral.v.im


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable.
#           = 0: real.
#           = 1: boolean.
#           = 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(190,91)
This flag activate the power output [:#(type=Boolean)]
This flag activate the complex current output [:#(type=Boolean)]
This flag activate the complex voltage output [:#(type=Boolean)]
[V]
[V]
[A]
[A]
number of phases [:#(type=Integer)]
[V]
[V]
[V]
[V]
Real power [W]
Apparent power [var]
Phase shift [rad|deg]
Power factor
Real part of complex number
Imaginary part of complex number
Real part of complex number [A]
Imaginary part of complex number [A]
Real part of complex number [V]
Imaginary part of complex number [V]
Control signal
Nominal power (P_nominal >= 0) [W]
Power factor. fixme: this should be a spline
[W]
[var]
Phase shift [rad|deg]
Set to true for inductive loads (motor, transformer), or false otherwise [:#(type=Boolean)]
Small number used to avoid a singularity if the power is zero
Small number used to avoid a singularity if the power is zero
Flag, set to true if component is a load, or false if it generates power [:#(type=Boolean)]
Internal representation of control signal, used to avoid singularity
[V]
[V]
[A]
[A]
Height of ramps
Durations of ramp [s]
Offset of output signal
Output = offset for time < startTime [s]
This flag activate the power output [:#(type=Boolean)]
This flag activate the complex current output [:#(type=Boolean)]
This flag activate the complex voltage output [:#(type=Boolean)]
[V]
[V]
[A]
[A]
number of phases [:#(type=Integer)]
[V]
[V]
Real power [W]
Apparent power [var]
Phase shift [rad|deg]
Power factor
Real part of complex number
Imaginary part of complex number
Real part of complex number [A]
Imaginary part of complex number [A]
Real part of complex number [V]
Imaginary part of complex number [V]
Nominal power (P_nominal >= 0) [W]
Power factor
[W]
[var]
Phase shift [rad|deg]
Set to true for inductive loads (motor, transformer), or false otherwise [:#(type=Boolean)]
This flag activate the power output [:#(type=Boolean)]
This flag activate the complex current output [:#(type=Boolean)]
This flag activate the complex voltage output [:#(type=Boolean)]
number of phases [:#(type=Integer)]
[rad|deg]
[rad/s]
[V]
[V]
Real power [W]
Apparent power [var]
Phase shift [rad|deg]
Power factor
Real part of complex number
Imaginary part of complex number
Real part of complex number [A]
Imaginary part of complex number [A]
Real part of complex number [V]
Imaginary part of complex number [V]
Nominal power (P_nominal >= 0) [W]
Power factor. fixme: this should be a spline
[W]
[var]
Phase shift [rad|deg]
Set to true for inductive loads (motor, transformer), or false otherwise [:#(type=Boolean)]
Small number used to avoid a singularity if the power is zero
Small number used to avoid a singularity if the power is zero
Flag, set to true if component is a load, or false if it generates power [:#(type=Boolean)]
Internal representation of control signal, used to avoid singularity
This flag activate the power output [:#(type=Boolean)]
This flag activate the complex current output [:#(type=Boolean)]
This flag activate the complex voltage output [:#(type=Boolean)]
number of phases [:#(type=Integer)]
[V]
[V]
Real power [W]
Apparent power [var]
Phase shift [rad|deg]
Power factor
Real part of complex number
Imaginary part of complex number
Real part of complex number [A]
Imaginary part of complex number [A]
Real part of complex number [V]
Imaginary part of complex number [V]
Nominal power (P_nominal >= 0) [W]
Power factor
[W]
[var]
Phase shift [rad|deg]
Set to true for inductive loads (motor, transformer), or false otherwise [:#(type=Boolean)]
This flag activate the power output [:#(type=Boolean)]
[A]
[A]
number of phases [:#(type=Integer)]
[rad|deg]
[V]
[V]
[A]
[A]
Real power [W]
Apparent power [var]
Phase shift [rad|deg]
Power factor
Real part of complex number
Imaginary part of complex number
frequency of the source [Hz]
RMS voltage of the source [V]
phase shift of the source [rad|deg]
[rad|deg]
[V]
[V]
frequency of the source [Hz]
RMS voltage of the source [V]
phase shift of the source [rad|deg]
[V]
[V]
This flag activate the power output [:#(type=Boolean)]
This flag activate the complex current output [:#(type=Boolean)]
This flag activate the complex voltage output [:#(type=Boolean)]
number of phases [:#(type=Integer)]
[rad|deg]
[V]
[V]
Real power [W]
Apparent power [var]
Phase shift [rad|deg]
Power factor
Real part of complex number
Imaginary part of complex number
Real part of complex number [A]
Imaginary part of complex number [A]
Real part of complex number [V]
Imaginary part of complex number [V]
number of loads connected in series [:#(type=Integer)]
number of phases [:#(type=Integer)]
number of phases [:#(type=Integer)]
[rad|deg]
[V]
[V]
This flag activate the power output [:#(type=Boolean)]
This flag activate the complex current output [:#(type=Boolean)]
This flag activate the complex voltage output [:#(type=Boolean)]
number of phases [:#(type=Integer)]
[rad|deg]
[V]
[V]
Real power [W]
Apparent power [var]
Phase shift [rad|deg]
Power factor
Real part of complex number
Imaginary part of complex number
Real part of complex number [A]
Imaginary part of complex number [A]
Real part of complex number [V]
Imaginary part of complex number [V]
number of loads connected in series [:#(type=Integer)]
number of phases [:#(type=Integer)]
[rad|deg]
number of phases [:#(type=Integer)]
[rad|deg]
[V]
[V]

