#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       1                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
    3456                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(156,28)
system.f_nom
system.f
system.fType_par
system.f_lim[1]
system.f_lim[2]
system.alpha0
system.omega_nom
system.w_nom
system.synRef
system.steadyIni
system.transientSim
system.steadyIni_t
system.initime
system.theta
system.der(theta)
system.omega
system.receiveFreq.H
system.receiveFreq.w_H
system.receiveFreq.h
system.receiveFreq.w_h
transPh.y[1]
transPh.y[2]
transPh.n
transPh.t_change
transPh.t_duration
transPh.a_ini
transPh.a_fin
transPh.ph_ini
transPh.ph_fin
transPh.coef
voltage1.fType_sys
voltage1.fType_par
voltage1.f
voltage1.term.v[1]
voltage1.term.v[2]
voltage1.puUnits
voltage1.V_nom
voltage1.S_nom
voltage1.pol
voltage1.scType_par
voltage1.neutral.v
voltage1.neutral.i
voltage1.V_base
voltage1.fType
voltage1.omega_internal
voltage1.der(theta)
voltage1.veff
voltage1.alpha0
voltage1.V
voltage1.phi
voltage2.fType_sys
voltage2.fType_par
voltage2.f
voltage2.term.v[1]
voltage2.term.v[2]
voltage2.puUnits
voltage2.V_nom
voltage2.S_nom
voltage2.pol
voltage2.scType_par
voltage2.neutral.v
voltage2.neutral.i
voltage2.V_base
voltage2.fType
voltage2.omega_internal
voltage2.vPhasor_internal[1]
voltage2.vPhasor_internal[2]
voltage2.der(theta)
voltage2.veff
voltage2.alpha0
voltage2.V
voltage2.phi
meter.av
meter.tcst
meter.term_p.v[2]
meter.term_n.v[2]
meter.puUnits
meter.V_nom
meter.S_nom
meter.p
meter.v
meter.v0
meter.i
meter.i0
meter.V_base
meter.I_base
meter.pav
meter.v_ab[2]
meter.i_ab[1]
meter.i_ab[2]
line.term_p.v[2]
line.term_n.v[2]
line.len
line.ne
line.par.puUnits
line.par.V_nom
line.par.S_nom
line.par.f_nom
line.par.r[1]
line.par.r[2]
line.par.x
line.par.x0
line.par.g_pg
line.par.g_pp
line.par.b_pg
line.par.b_pp
line.RL_base[1]
line.RL_base[2]
line.delta_len_km
line.R[1]
line.R[2]
line.L[1, 1]
line.L[1, 2]
line.L[2, 1]
line.L[2, 2]
line.GC_base[1]
line.GC_base[2]
line.G[1, 1]
line.G[1, 2]
line.G[2, 1]
line.G[2, 2]
line.C[1, 1]
line.C[1, 2]
line.C[2, 1]
line.C[2, 2]
line.v[1, 1]
line.der(v[1, 1])
line.v[1, 2]
line.der(v[1, 2])
line.v[1, 3]
line.der(v[1, 3])
line.v[2, 1]
line.der(v[2, 1])
line.v[2, 2]
line.der(v[2, 2])
line.v[2, 3]
line.der(v[2, 3])
line.i[1, 1]
line.der(i[1, 1])
line.i[1, 2]
line.der(i[1, 2])
line.i[1, 3]
line.der(i[1, 3])
line.i[1, 4]
line.der(i[1, 4])
line.i[2, 1]
line.der(i[2, 1])
line.i[2, 2]
line.der(i[2, 2])
line.i[2, 3]
line.der(i[2, 3])
line.i[2, 4]
line.der(i[2, 4])
line.ne1
grd1.term.v
grd2.term.v

double initialValue(156,6)
  0      50                       0                       0                
  6   256   # system.f_nom
  0      50                       0                       0                
  6   256   # system.f
  0       1                       0                       0                
  6   257   # system.fType_par
  0      25                       0                       0                
  6   256   # system.f_lim[1]
  0     100                       0                       0                
  6   256   # system.f_lim[2]
  0       0                       0                       0                
  6   256   # system.alpha0
  0  3.1415926535897933E+02       0                       0                
  6   256   # system.omega_nom
  0  3.1415926535897933E+02       0                       0                
  6   256   # system.w_nom
  0       1                       0                       0                
  6   257   # system.synRef
  0       1                       0                       0                
  6   257   # system.steadyIni
  0       0                       0                       0                
  6   257   # system.transientSim
  0       0                       0                       0                
  6   257   # system.steadyIni_t
  0       0                       0                       0                
  6   256   # system.initime
 -1       0                       0                       0                
  2   280   # system.theta
  0       0                       0                       0                
  3   256   # system.der(theta)
  0  3.1415926535897933E+02       0                       0                
  6   256   # system.omega
  0       0                       0                       0                
  6   388   # system.receiveFreq.H
  0       0                       0                       0                
  6   388   # system.receiveFreq.w_H
  0       0                       0                       0                
  6   260   # system.receiveFreq.h
  0       0                       0                       0                
  6   260   # system.receiveFreq.w_h
  0       0                       0                       0                
  6   256   # transPh.y[1]
  0       0                       0                       0                
  6   256   # transPh.y[2]
  0       2                       0                       0                
  6   258   # transPh.n
 -1  5.0000000000000000E-01       0                       0                
  1   280   # transPh.t_change
 -1       1                       0                       0                
  1   280   # transPh.t_duration
 -1  5.0000000000000000E-01       0                       0                
  1   280   # transPh.a_ini
 -1       1                       0                       0                
  1   280   # transPh.a_fin
 -1       0                       0                       0                
  1   280   # transPh.ph_ini
 -1  8.7266462599716002E-02       0                       0                
  1   280   # transPh.ph_fin
  0       0                       0                       0                
  6  1280   # transPh.coef
  0       1                       0                       0                
  6   257   # voltage1.fType_sys
  0       1                       0                       0                
  6   257   # voltage1.fType_par
  0      50                       0                       0                
  6   256   # voltage1.f
  0       0                       0                       0                
  6   260   # voltage1.term.v[1]
  0       0                       0                       0                
  6   260   # voltage1.term.v[2]
  0       1                       0                       0                
  6   257   # voltage1.puUnits
  0  1.3200000000000000E+05       0                 1.0000000000000000E+100
  6   256   # voltage1.V_nom
  0       1                       0                 1.0000000000000000E+100
  6   256   # voltage1.S_nom
  0      -1                      -1                       1                
  6   258   # voltage1.pol
  0       0                       0                       0                
  6   257   # voltage1.scType_par
  0       0                       0                       0                
  6   260   # voltage1.neutral.v
  0       0                       0                       0                
  6   388   # voltage1.neutral.i
  0  1.3200000000000000E+05       0                       0                
  6  1280   # voltage1.V_base
  0       3                       1                       3                
  6  1282   # voltage1.fType
  0       0                       0                       0                
  6  1280   # voltage1.omega_internal
  0  3.1415926535897933E+02       0                       0                
  6  1280   # voltage1.der(theta)
 -1       1                       0                       0                
  1   280   # voltage1.veff
 -1  8.7266462599716002E-02       0                       0                
  1   280   # voltage1.alpha0
  0       0                       0                       0                
  6  1280   # voltage1.V
  0       0                       0                       0                
  6  1280   # voltage1.phi
  0       1                       0                       0                
  6   257   # voltage2.fType_sys
  0       1                       0                       0                
  6   257   # voltage2.fType_par
  0      50                       0                       0                
  6   256   # voltage2.f
  0       0                       0                       0                
  6   260   # voltage2.term.v[1]
  0       0                       0                       0                
  6   260   # voltage2.term.v[2]
  0       1                       0                       0                
  6   257   # voltage2.puUnits
  0  1.3200000000000000E+05       0                 1.0000000000000000E+100
  6   256   # voltage2.V_nom
  0       1                       0                 1.0000000000000000E+100
  6   256   # voltage2.S_nom
  0      -1                      -1                       1                
  6   258   # voltage2.pol
  0       1                       0                       0                
  6   257   # voltage2.scType_par
  0       0                       0                       0                
  6   260   # voltage2.neutral.v
  0       0                       0                       0                
  6   388   # voltage2.neutral.i
  0  1.3200000000000000E+05       0                       0                
  6  1280   # voltage2.V_base
  0       3                       1                       3                
  6  1282   # voltage2.fType
  0       0                       0                       0                
  6  1280   # voltage2.omega_internal
  0       0                       0                       0                
  6  1280   # voltage2.vPhasor_internal[1]
  0       0                       0                       0                
  6  1280   # voltage2.vPhasor_internal[2]
  0  3.1415926535897933E+02       0                       0                
  6  1280   # voltage2.der(theta)
 -1       1                       0                       0                
  1   280   # voltage2.veff
 -1       0                       0                       0                
  1   280   # voltage2.alpha0
  0       0                       0                       0                
  6  1280   # voltage2.V
  0       0                       0                       0                
  6  1280   # voltage2.phi
  0       0                       0                       0                
  6   257   # meter.av
  0       1                  1.0000000000000001E-09 1.0000000000000000E+100
  6   256   # meter.tcst
  0       0                       0                       0                
  6   260   # meter.term_p.v[2]
  0       0                       0                       0                
  6   260   # meter.term_n.v[2]
  0       1                       0                       0                
  6   257   # meter.puUnits
  0  1.3200000000000000E+05       0                 1.0000000000000000E+100
  6   256   # meter.V_nom
  0  1.0000000000000000E+08       0                 1.0000000000000000E+100
  6   256   # meter.S_nom
  0       0                       0                       0                
  6   256   # meter.p
  0       0                       0                       0                
  6   256   # meter.v
  0       0                       0                       0                
  6   256   # meter.v0
  0       0                       0                       0                
  6   256   # meter.i
  0       0                       0                       0                
  6   256   # meter.i0
  0  1.3200000000000000E+05       0                       0                
  6  1280   # meter.V_base
  0  7.5757575757575762E+02       0                       0                
  6  1280   # meter.I_base
  0       0                       0                       0                
  6  1280   # meter.pav
  0       0                       0                       0                
  6  1280   # meter.v_ab[2]
  0       0                       0                       0                
  6  1280   # meter.i_ab[1]
  0       0                       0                       0                
  6  1280   # meter.i_ab[2]
  0       0                       0                       0                
  6   260   # line.term_p.v[2]
  0       0                       0                       0                
  6   260   # line.term_n.v[2]
 -1  100000                       0                       0                
  1   280   # line.len
  0       3                       1                 1.0000000000000000E+100
  6   258   # line.ne
  0       1                       0                       0                
  6   257   # line.par.puUnits
  0  1.3200000000000000E+05       0                 1.0000000000000000E+100
  6   256   # line.par.V_nom
  0  1.0000000000000000E+08       0                 1.0000000000000000E+100
  6   256   # line.par.S_nom
  0      50                       0                       0                
  6   256   # line.par.f_nom
 -1  1.0000000000000000E-04       0                 1.0000000000000000E+100
  1   280   # line.par.r[1]
 -1  1.0000000000000000E-04       0                 1.0000000000000000E+100
  1   280   # line.par.r[2]
  0  1.0000000000000000E-03       0                 1.0000000000000000E+100
  6   256   # line.par.x
  0  3.0000000000000001E-03  1.0000000000000000E-03 1.0000000000000000E+100
  6   256   # line.par.x0
 -1       0                       0                 1.0000000000000000E+100
  1   280   # line.par.g_pg
 -1       0                       0                 1.0000000000000000E+100
  1   280   # line.par.g_pp
 -1  2.5000000000000001E-05       0                 1.0000000000000000E+100
  1   280   # line.par.b_pg
 -1  2.5000000000000001E-05       0                 1.0000000000000000E+100
  1   280   # line.par.b_pp
  0  1.7424000000000001E+02       0                       0                
  6  1280   # line.RL_base[1]
  0  5.5462314568663684E-01       0                       0                
  6  1280   # line.RL_base[2]
  0       0                       0                       0                
  6  1280   # line.delta_len_km
  0       0                       0                       0                
  6  1280   # line.R[1]
  0       0                       0                       0                
  6  1280   # line.R[2]
  0       0                       0                       0                
  6  1280   # line.L[1, 1]
  0       0                       0                       0                
  6  1280   # line.L[1, 2]
  0       0                       0                       0                
  6  1280   # line.L[2, 1]
  0       0                       0                       0                
  6  1280   # line.L[2, 2]
  0  5.7392102846648297E-03       0                       0                
  6  1280   # line.GC_base[1]
  0  1.8268473724965029E-05       0                       0                
  6  1280   # line.GC_base[2]
  0       0                       0                       0                
  6  1280   # line.G[1, 1]
  0       0                       0                       0                
  6  1280   # line.G[1, 2]
  0       0                       0                       0                
  6  1280   # line.G[2, 1]
  0       0                       0                       0                
  6  1280   # line.G[2, 2]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # line.C[1, 1]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # line.C[1, 2]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # line.C[2, 1]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # line.C[2, 2]
 -1       0                       0                       0                
  2   280   # line.v[1, 1]
  0       0                       0                       0                
  3   256   # line.der(v[1, 1])
 -1       0                       0                       0                
  2   280   # line.v[1, 2]
  0       0                       0                       0                
  3   256   # line.der(v[1, 2])
 -1       0                       0                       0                
  2   280   # line.v[1, 3]
  0       0                       0                       0                
  3   256   # line.der(v[1, 3])
 -1       0                       0                       0                
  2   280   # line.v[2, 1]
  0       0                       0                       0                
  3   256   # line.der(v[2, 1])
 -1       0                       0                       0                
  2   280   # line.v[2, 2]
  0       0                       0                       0                
  3   256   # line.der(v[2, 2])
 -1       0                       0                       0                
  2   280   # line.v[2, 3]
  0       0                       0                       0                
  3   256   # line.der(v[2, 3])
 -1       0                       0                       0                
  2   280   # line.i[1, 1]
  0       0                       0                       0                
  3   256   # line.der(i[1, 1])
 -1       0                       0                       0                
  2   280   # line.i[1, 2]
  0       0                       0                       0                
  3   256   # line.der(i[1, 2])
 -1       0                       0                       0                
  2   280   # line.i[1, 3]
  0       0                       0                       0                
  3   256   # line.der(i[1, 3])
 -1       0                       0                       0                
  2   280   # line.i[1, 4]
  0       0                       0                       0                
  3   256   # line.der(i[1, 4])
 -1       0                       0                       0                
  2   280   # line.i[2, 1]
  0       0                       0                       0                
  3   256   # line.der(i[2, 1])
 -1       0                       0                       0                
  2   280   # line.i[2, 2]
  0       0                       0                       0                
  3   256   # line.der(i[2, 2])
 -1       0                       0                       0                
  2   280   # line.i[2, 3]
  0       0                       0                       0                
  3   256   # line.der(i[2, 3])
 -1       0                       0                       0                
  2   280   # line.i[2, 4]
  0       0                       0                       0                
  3   256   # line.der(i[2, 4])
  0       4                       0                       0                
  6  1282   # line.ne1
  0       0                       0                       0                
  6   260   # grd1.term.v
  0       0                       0                       0                
  6   260   # grd2.term.v


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable.
#           = 0: real.
#           = 1: boolean.
#           = 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(156,94)
nom frequency [Hz]
frequency (initial if fType_par = false (average)) [Hz]
= true, if system frequency defined by parameter f, else average frequency [:#(type=Boolean)]
limit frequencies (for average definition) [Hz]
limit frequencies (for average definition) [Hz]
phase angle [rad|deg]
nom angular frequency [rad/s]
nom r.p.m. [rad/s|rpm]
[:#(type=Boolean)]
steady state initialisation of electric equations [:#(type=Boolean)]
transient mode of electric equations [:#(type=Boolean)]
[:#(type=Boolean)]
[s]
[rad|deg]
[rad/s]
[rad/s]
inertia constant [s]
angular velocity, inertia-weighted [rad|deg]
Dummy potential-variable to balance flow-variable H
Dummy potential-variable to balance flow-variable w_H
output signal-vector
output signal-vector
dim of output signal-vector [:#(type=Integer)]
time when change [s]
transition duration [s]
initial norm |y|
final norm |y|
initial phase (y) [rad|deg]
final phase (y) [rad|deg]
[Hz]
= true, if source has system frequency [:#(type=Boolean)]
= true, if source has parameter frequency, otherwise defined by input omega [:#(type=Boolean)]
source frequency [Hz]
voltage vector [V]
voltage vector [V]
= true, if scaled with nom. values (pu), else scaled with 1 (SI) [:#(type=Boolean)]
nominal Voltage (= base for pu) [V]
nominal Power (= base for pu) [VA]
grounding scheme [:#(type=Integer)]
= true: voltage defined by parameter otherwise by input signal [:#(type=Boolean)]
Potential at the pin [V]
Current flowing into the pin [A]
[V]
frequency type [:#(type=PowerSystems.Basic.Types.FreqType)]
Needed to connect to conditional connector [rad/s]
[rad/s]
eff voltage [V/V]
phase angle [rad|deg]
[V]
[rad|deg]
= true, if source has system frequency [:#(type=Boolean)]
= true, if source has parameter frequency, otherwise defined by input omega [:#(type=Boolean)]
source frequency [Hz]
voltage vector [V]
voltage vector [V]
= true, if scaled with nom. values (pu), else scaled with 1 (SI) [:#(type=Boolean)]
nominal Voltage (= base for pu) [V]
nominal Power (= base for pu) [VA]
grounding scheme [:#(type=Integer)]
= true: voltage defined by parameter otherwise by input signal [:#(type=Boolean)]
Potential at the pin [V]
Current flowing into the pin [A]
[V]
frequency type [:#(type=PowerSystems.Basic.Types.FreqType)]
Needed to connect to conditional connector [rad/s]
Needed to connect to conditional connector
Needed to connect to conditional connector
[rad/s]
eff voltage [V/V]
phase angle [rad|deg]
[V]
[rad|deg]
time average power [:#(type=Boolean)]
average time-constant [s]
voltage vector [V]
voltage vector [V]
= true, if scaled with nom. values (pu), else scaled with 1 (SI) [:#(type=Boolean)]
nominal Voltage (= base for pu) [V]
nominal Power (= base for pu) [VA]
[W/W]
[V/V]
[V/V]
[A/A]
[A/A]
[V]
[A]
[W/W]
[V/V]
[A/A]
[A/A]
voltage vector [V]
voltage vector [V]
line length [m|km]
number of pi-elements [:#(type=Integer)]
= true, if scaled with nom. values (pu), else scaled with 1 (SI) [:#(type=Boolean)]
nominal Voltage (= base for pu) [V]
nominal Power (= base for pu) [VA]
nominal frequency [Hz]
resistance/km [Ohm/(V.V/VA)]
resistance/km [Ohm/(V.V/VA)]
reactance/km [Ohm/(km.V.V/VA)]
reactance/km zero-comp [Ohm/(km.V.V/VA)]
shunt conductance/km ph-grd [S/(VA/(V.V))]
shunt conductance/km ph_ph [S/(VA/(V.V))]
susceptance/km ph-grd [S/(km.VA/(V.V))]
susceptance/km ph-ph [S/(km.VA/(V.V))]


[km]
[Ohm]
[Ohm]
[H]
[H]
[H]
[H]


[S]
[S]
[S]
[S]
[F]
[F]
[F]
[F]
[V/V]
[s-1]
[V/V]
[s-1]
[V/V]
[s-1]
[V/V]
[s-1]
[V/V]
[s-1]
[V/V]
[s-1]
[A/A]
[s-1]
[A/A]
[s-1]
[A/A]
[s-1]
[A/A]
[s-1]
[A/A]
[s-1]
[A/A]
[s-1]
[A/A]
[s-1]
[A/A]
[s-1]
[:#(type=Integer)]
Potential at the pin [V]
Potential at the pin [V]

